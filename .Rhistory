y <- getpd(gettd(vf))[,locs]
} else stop("wrong type of plot requested. Must be 's', 'td', or 'pd'")
# remove blind spot locations
if(length(getlocmap()$bs) > 0) {
gpar$coord <- gpar$coord[-getlocmap()$bs,]
y <- y[,-getlocmap()$bs]
}
for(i in 1:nrow(figs)) {
par(fig = c(figs[i,]), new = TRUE)
plot(x, y[,i], type = "l", xlim = xlim, ylim = ylim, axes = FALSE, col = cols[i])
}
if(vf$eye[1] == "OS") gpar$tess$xlim <- gpar$tess$xlim[2:1]
xlim <- c(0, max(x))
ylim <- c(min(y), max(y))
suppressWarnings(resmad <- sapply(as.list(y), function(y) mad(lm(y ~ x)$residuals)))
cols <- rep("#4D4D4D", length(resmad))
cols[resmad > thr] <- "#FF0000"
defpar <- par(no.readonly = TRUE) # read default par
on.exit(par(defpar))
for(i in 1:nrow(figs)) {
par(fig = c(figs[i,]), new = TRUE)
plot(x, y[,i], type = "l", xlim = xlim, ylim = ylim, axes = FALSE, col = cols[i])
}
figs
vflegoplotsens(d[1:12,])
vflegoplotsens(vfb=d[1:12,])
?vflegoplotsens
vflegoplotsens(gpar=gpar, vfb=d[1:12,])
vflegoplotsens(gpar=gpar, vfb=d[1,], vfl=d[12,])
vflegoplotsens(gpar=gpar, vfb=d[1,], vfl=d[12,], 30, 30)
nv$agem$model(vfb$age)
vfmean(vfselect(vf, sel = "first", n = grp), by = "eye")
vf
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")
nv$agem$model(vfb$age)
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
vflegoplotsens(gpar, vfb[,locs], vfl[,locs], maxb, maxl)
gpar$coord
?vfsparklines
vfsparklines(vf, type='s')
gpar = getgpar()
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
vflegoplotsens(gpar, vfb[,locs], vfl[,locs], maxb, maxl)
plot(gpar$coord$x, gpar$coord$y, typ = "n", ann = FALSE, axes = FALSE, asp = 1,
xlim = gpar$tess$xlim, ylim = gpar$tess$ylim)
vflegoplotsens(gpar, vfb[,locs], vfl[,locs], maxb, maxl)
gpar$coord$x
vfsparklines(vf, type='s')
gpar = getgpar()
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
bs <- getlocmap()$bs
coord <- gpar$coord
if(length(bs) > 0) {
coord <- coord[-bs,]
txt   <- txt[-bs]
fcol  <- fcol[-bs]
tcol  <- tcol[-bs]
}
bs <- getlocmap()$bs
coord <- gpar$coord
txt <- round(vfl - vfb, digits)
if(length(bs) > 0) {
coord <- coord[-bs,]
txt   <- txt[-bs]
fcol  <- fcol[-bs]
tcol  <- tcol[-bs]
}
round(vfl - vfb, digits)
vfl
vfb
digits
vfb
vfb <- vfmean(vfselect(vf, sel = "first", n = grp), by = "eye")
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")
vfb
vfb <- vfmean(vfselect(vf, sel = "first", n = 1), by = "eye")
vfb
vfl - vfb
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")
vfb
bs <- getlocmap()$bs
# baseline grayscale
fcolb <- (vfb - gpar$tess$floor) / (maxb - gpar$tess$floor)
fcolb[fcolb > 1] <- 1
fcolb[fcolb < 0] <- 0
fcolb[bs] <- 1   # blind spot
fcolb <- rgb(fcolb, fcolb, fcolb)
# final grayscale
fcol <- (vfl - gpar$tess$floor) / (maxl - gpar$tess$floor)
fcol[fcol > 1] <- 1
fcol[fcol < 0] <- 0
fcol[bs] <- 1
# foreground text gray shades
tcol <- rep(0.3, length(vfl))
tcol[fcol < 0.5] <- 0.7
# convert to hexadecimal color
fcol <- rgb(fcol, fcol, fcol)
tcol <- rgb(tcol, tcol, tcol)
# values to present
txt <- round(vfl - vfb, digits=0)
# remove blind spot locations
coord <- gpar$coord
if(length(bs) > 0) {
coord <- coord[-bs,]
txt   <- txt[-bs]
fcol  <- fcol[-bs]
tcol  <- tcol[-bs]
}
locs <- getlocini():ncol(vf)
locs
vfsparklines(vf, type='s')
gpar = getgpar()
locs <- getlocini():ncol(vf)
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
bs <- getlocmap()$bs
# baseline grayscale
fcolb <- (vfb[,locs] - gpar$tess$floor) / (maxb - gpar$tess$floor)
fcolb[fcolb > 1] <- 1
fcolb[fcolb < 0] <- 0
fcolb[bs] <- 1   # blind spot
fcolb <- rgb(fcolb, fcolb, fcolb)
# final grayscale
fcol <- (vfl[,locs] - gpar$tess$floor) / (maxl - gpar$tess$floor)
fcol[fcol > 1] <- 1
fcol[fcol < 0] <- 0
fcol[bs] <- 1
# foreground text gray shades
tcol <- rep(0.3, length(vfl))
tcol[fcol < 0.5] <- 0.7
# convert to hexadecimal color
fcol <- rgb(fcol, fcol, fcol)
tcol <- rgb(tcol, tcol, tcol)
# values to present
txt <- round(vfl - vfb, digits=0)
# remove blind spot locations
coord <- gpar$coord
if(length(bs) > 0) {
coord <- coord[-bs,]
txt   <- txt[-bs]
fcol  <- fcol[-bs]
tcol  <- tcol[-bs]
}
bs <- getlocmap()$bs
# baseline grayscale
fcolb <- (vfb[,locs] - gpar$tess$floor) / (maxb - gpar$tess$floor)
fcolb[fcolb > 1] <- 1
fcolb[fcolb < 0] <- 0
fcolb[bs] <- 1   # blind spot
fcolb <- rgb(fcolb, fcolb, fcolb)
# final grayscale
fcol <- (vfl[,locs] - gpar$tess$floor) / (maxl - gpar$tess$floor)
fcol[fcol > 1] <- 1
fcol[fcol < 0] <- 0
fcol[bs] <- 1
# foreground text gray shades
tcol <- rep(0.3, length(vfl))
tcol[fcol < 0.5] <- 0.7
# convert to hexadecimal color
fcol <- rgb(fcol, fcol, fcol)
tcol <- rgb(tcol, tcol, tcol)
# values to present
txt <- round(vfl[,locs] - vfb[,locs], digits=0)
# remove blind spot locations
coord <- gpar$coord
if(length(bs) > 0) {
coord <- coord[-bs,]
txt   <- txt[-bs]
fcol  <- fcol[-bs]
tcol  <- tcol[-bs]
}
vfsparklines(vf, type='s')
gpar = getgpar()
locs <- getlocini():ncol(vf)
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
bs <- getlocmap()$bs
# baseline grayscale
fcolb <- (vfb[,locs] - gpar$tess$floor) / (maxb - gpar$tess$floor)
fcolb[fcolb > 1] <- 1
fcolb[fcolb < 0] <- 0
fcolb[bs] <- 1   # blind spot
fcolb <- rgb(fcolb, fcolb, fcolb)
# final grayscale
fcol <- (vfl[,locs] - gpar$tess$floor) / (maxl - gpar$tess$floor)
fcol[fcol > 1] <- 1
fcol[fcol < 0] <- 0
fcol[bs] <- 1
# foreground text gray shades
tcol <- rep(0.3, length(vfl))
tcol[fcol < 0.5] <- 0.7
# convert to hexadecimal color
fcol <- rgb(fcol, fcol, fcol)
tcol <- rgb(tcol, tcol, tcol)
# values to present
txt <- round(vfl[,locs] - vfb[,locs], digits=0)
# remove blind spot locations
coord <- gpar$coord
if(length(bs) > 0) {
coord <- coord[-bs,]
txt   <- txt[-bs]
fcol  <- fcol[-bs]
tcol  <- tcol[-bs]
}
for(i in 1:nrow(coord))
draw.circle(coord$x[i], coord$y[i], radius = crad, col = fcol[i], lty = 0)
library(plotrix)
for(i in 1:nrow(coord))
draw.circle(coord$x[i], coord$y[i], radius = crad, col = fcol[i], lty = 0)
for(i in 1:nrow(coord))
draw.circle(coord$x[i], coord$y[i], radius = 2, col = fcol[i], lty = 0)
coord$x
text(coord$x, coord$y, txt, col = tcol)
vfsparklines(vf, type='s')
gpar = getgpar()
locs <- getlocini():ncol(vf)
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")[,locs]
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")[,locs]
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
vfsparklines(vf, type='s')
gpar = getgpar()
locs <- getlocini():ncol(vf)
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")[,locs]
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")[,locs]
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
vflegoplotsens(gpar, vfb, vfl, maxb, maxl)
vfb
vfl
maxb
maxl
nv$agem$model(vfb$age)
nv$agem$model(vfb$age)
vfsparklines(vf, type='s')
gpar = getgpar()
locs <- getlocini():ncol(vf)
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")[,locs]
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")[,locs]
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
bs <- getlocmap()$bs
# baseline grayscale
fcolb <- (vfb - gpar$tess$floor) / (maxb - gpar$tess$floor)
fcolb[fcolb > 1] <- 1
fcolb[fcolb < 0] <- 0
fcolb[bs] <- 1   # blind spot
fcolb <- rgb(fcolb, fcolb, fcolb)
# final grayscale
fcol <- (vfl - gpar$tess$floor) / (maxl - gpar$tess$floor)
fcol[fcol > 1] <- 1
fcol[fcol < 0] <- 0
fcol[bs] <- 1
# foreground text gray shades
tcol <- rep(0.3, length(vfl))
tcol[fcol < 0.5] <- 0.7
# convert to hexadecimal color
fcol <- rgb(fcol, fcol, fcol)
tcol <- rgb(tcol, tcol, tcol)
# values to present
txt <- round(vfl - vfb, digits=0)
# remove blind spot locations
coord <- gpar$coord
if(length(bs) > 0) {
coord <- coord[-bs,]
txt   <- txt[-bs]
fcol  <- fcol[-bs]
tcol  <- tcol[-bs]
}
for(i in 1:nrow(coord))
draw.circle(coord$x[i], coord$y[i], radius = 2, col = fcol[i], lty = 0)
text(coord$x, coord$y, txt, col = tcol)
bs <- getlocmap()$bs
# baseline grayscale
fcolb <- (vfb - gpar$tess$floor) / (maxb - gpar$tess$floor)
fcolb[fcolb > 1] <- 1
fcolb[fcolb < 0] <- 0
fcolb[bs] <- 1   # blind spot
fcolb <- rgb(fcolb, fcolb, fcolb)
# final grayscale
fcol <- (vfl - gpar$tess$floor) / (maxl - gpar$tess$floor)
fcol[fcol > 1] <- 1
fcol[fcol < 0] <- 0
fcol[bs] <- 1
# foreground text gray shades
tcol <- rep(0.3, length(vfl))
tcol[fcol < 0.5] <- 0.7
# convert to hexadecimal color
fcol <- rgb(fcol, fcol, fcol)
tcol <- rgb(tcol, tcol, tcol)
# values to present
txt <- round(vfl - vfb, digits=0)
# remove blind spot locations
coord <- gpar$coord
if(length(bs) > 0) {
coord <- coord[-bs,]
txt   <- txt[-bs]
fcol  <- fcol[-bs]
tcol  <- tcol[-bs]
}
for(i in 1:nrow(coord))
draw.circle(coord$x[i], coord$y[i], radius = 2, col = fcol[i], lty = 0)
text(coord$x, coord$y, txt, col = tcol)
warnings()
vflegoplotsens(gpar, vfb, vfl, maxb, maxl)
locs <- getlocini():ncol(vf)
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")[,locs]
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")[,locs]
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
vfsparklines(vf, type='s')
gpar = getgpar()
locs <- getlocini():ncol(vf)
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")[,locs]
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")[,locs]
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
vflegoplotsens(gpar, vfb, vfl, maxb, maxl)
gpar = getgpar()
locs <- getlocini():ncol(vf)
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")[,locs]
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")[,locs]
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
vflegoplotsens(gpar, vfb, vfl, maxb, maxl)
locs <- getlocini():ncol(vf)
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
vflegoplotsens(gpar, vfb[,locs], vfl[,locs], maxb, maxl)
vfsparklines(vf, type='s')
gpar = getgpar()
locs <- getlocini():ncol(vf)
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
vflegoplotsens(gpar, vfb[,locs], vfl[,locs], maxb, maxl)
vfsparklines(vf, type='s')
gpar = getgpar()
locs <- getlocini():ncol(vf)
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
vflegoplotsens(gpar, vfb[,locs], vfl[,locs], maxb, maxl)
vfsparklines(vf, type='s')
gpar = getgpar()
locs <- getlocini():ncol(vf)
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
bs <- getlocmap()$bs
# baseline grayscale
fcolb <- (vfb - gpar$tess$floor) / (maxb - gpar$tess$floor)
fcolb[fcolb > 1] <- 1
fcolb[fcolb < 0] <- 0
fcolb[bs] <- 1   # blind spot
fcolb <- rgb(fcolb, fcolb, fcolb)
# final grayscale
fcol <- (vfl - gpar$tess$floor) / (maxl - gpar$tess$floor)
fcol[fcol > 1] <- 1
fcol[fcol < 0] <- 0
fcol[bs] <- 1
# foreground text gray shades
tcol <- rep(0.3, length(vfl))
tcol[fcol < 0.5] <- 0.7
# convert to hexadecimal color
fcol <- rgb(fcol, fcol, fcol)
tcol <- rgb(tcol, tcol, tcol)
# values to present
txt <- round(vfl - vfb, digits=0)
# remove blind spot locations
coord <- gpar$coord
if(length(bs) > 0) {
coord <- coord[-bs,]
txt   <- txt[-bs]
fcol  <- fcol[-bs]
tcol  <- tcol[-bs]
}
vfsparklines(vf, type='s')
gpar = getgpar()
locs <- getlocini():ncol(vf)
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
# vflegoplotsens(gpar, vfb[,locs], vfl[,locs], maxb, maxl)
bs <- getlocmap()$bs
# baseline grayscale
fcolb <- (vfb[,locs] - gpar$tess$floor) / (maxb - gpar$tess$floor)
fcolb[fcolb > 1] <- 1
fcolb[fcolb < 0] <- 0
fcolb[bs] <- 1   # blind spot
fcolb <- rgb(fcolb, fcolb, fcolb)
# final grayscale
fcol <- (vfl[,locs] - gpar$tess$floor) / (maxl - gpar$tess$floor)
fcol[fcol > 1] <- 1
fcol[fcol < 0] <- 0
fcol[bs] <- 1
# foreground text gray shades
tcol <- rep(0.3, length(vfl))
tcol[fcol < 0.5] <- 0.7
# convert to hexadecimal color
fcol <- rgb(fcol, fcol, fcol)
tcol <- rgb(tcol, tcol, tcol)
# values to present
txt <- round(vfl[,locs] - vfb[,locs], digits=0)
# remove blind spot locations
coord <- gpar$coord
if(length(bs) > 0) {
coord <- coord[-bs,]
txt   <- txt[-bs]
fcol  <- fcol[-bs]
tcol  <- tcol[-bs]
}
for(i in 1:length(gpar$tess$tiles))
polygon(gpar$tess$tiles[[i]], border = "lightgray", col = fcolb[i])
draw.ellipse(15, -1.5, 2.75, 3.75, col = "lightgray", border = NA)
polygon(gpar$tess$hull, border = "lightgray")
plot(gpar$coord$x, gpar$coord$y, typ = "n", ann = FALSE, axes = FALSE, asp = 1,
xlim = gpar$tess$xlim, ylim = gpar$tess$ylim)
?plot
?par
vfsparklines(vf, type='s')
gpar = getgpar()
locs <- getlocini():ncol(vf)
vfb <- vfmean(vfselect(vf, sel = "first", n = 3), by = "eye")
vfl <- vfmean(vfselect(vf, sel = "last", n = 3), by = "eye")
maxb <- nv$agem$model(vfb$age)
maxl <- nv$agem$model(vfb$age)
# vflegoplotsens(gpar, vfb[,locs], vfl[,locs], maxb, maxl)
bs <- getlocmap()$bs
# baseline grayscale
fcolb <- (vfb[,locs] - gpar$tess$floor) / (maxb - gpar$tess$floor)
fcolb[fcolb > 1] <- 1
fcolb[fcolb < 0] <- 0
fcolb[bs] <- 1   # blind spot
fcolb <- rgb(fcolb, fcolb, fcolb)
# final grayscale
fcol <- (vfl[,locs] - gpar$tess$floor) / (maxl - gpar$tess$floor)
fcol[fcol > 1] <- 1
fcol[fcol < 0] <- 0
fcol[bs] <- 1
# foreground text gray shades
tcol <- rep(0.3, length(vfl))
tcol[fcol < 0.5] <- 0.7
# convert to hexadecimal color
fcol <- rgb(fcol, fcol, fcol)
tcol <- rgb(tcol, tcol, tcol)
# values to present
txt <- round(vfl[,locs] - vfb[,locs], digits=0)
# remove blind spot locations
coord <- gpar$coord
if(length(bs) > 0) {
coord <- coord[-bs,]
txt   <- txt[-bs]
fcol  <- fcol[-bs]
tcol  <- tcol[-bs]
}
par(new=TRUE)
for(i in 1:nrow(coord))
draw.circle(coord$x[i], coord$y[i], radius = 2, col = fcol[i], lty = 0)
text(coord$x, coord$y, txt, col = tcol)
coord$x[i]
text(0.1,0.1, 'hii')
cbind(grconvertX(gpar$coord$x - width  / 2, to = "ndc"),
grconvertX(gpar$coord$x + width  / 2, to = "ndc"),
grconvertY(gpar$coord$y,              to = "ndc"),
grconvertY(gpar$coord$y + height,     to = "ndc"))
gpar$coord$x
grconvertX(gpar$coord$x - width  / 2, to = "ndc")
grconvertX(gpar$coord$x - width  / 2, from='user' to = "ndc")
grconvertX(gpar$coord$x - width  / 2, from='user', to = "ndc")
grconvertX(gpar$coord$x , from='user', to = "ndc")
install.packages('graphics')
install.packages("graphics")
install.packages('graphics')
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
detach("package:graphics", unload = TRUE)
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
update.packages("graphics")
detach("package:graphics", unload = TRUE)
update.packages("graphics")
library(graphics, lib.loc = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages("sass")
figs <- cbind(grconvertX(gpar$coord$x - width  / 2, from='user', to = "ndc"),
grconvertX(gpar$coord$x + width  / 2, to = "ndc"),
grconvertY(gpar$coord$y,              to = "ndc"),
grconvertY(gpar$coord$y + height,     to = "ndc"))
figs
coord$x[i]
